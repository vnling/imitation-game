//get text sample elements and put them in an array for shuffling
let sampleOne = document.getElementById('sample1');
let sampleTwo = document.getElementById('sample2');
let sampleThree = document.getElementById('sample3');
let samplesArray = [sampleOne, sampleTwo, sampleThree];
//get alien instruction for test zone page and set textInput as a global variable
let instruction = document.getElementById('instruction');
let textInput = "";
//load the charRNN model, create global variable for charRNN output
let charRNN = ml5.charRNN('./scifi');
let charRNNText;
//set a state variable to approve choices
let answersLoaded = false;

//when the window loads
window.onload = function () {
  //shuffle the array of samples
  shuffleArray(samplesArray);
  //fetch the human text sample
  fetch("/scifi-random")
    .then(response => response.json())
    .then(data => {
      //set it so that it can be loaded at the same time as the GPT2 text
      let humanText = data.message[1];
      //get the textInput so we can feed it into GPT2 & charRNN
      textInput = data.message[0];
      sendVector(humanText);
    })
  //check if the user has clicked the correct answer
  checkAnswer();
}

//just helps change color when samples are hovered over
//cannot be done in css because we're switching out the html
sampleOne.addEventListener('mouseenter', e => {
  sampleOne.style.backgroundColor = '#4d4081';
  sampleOne.style.color = 'white';
})

sampleOne.addEventListener('mouseleave', e => {
  sampleOne.style.backgroundColor = 'white';
  sampleOne.style.color = '#322567';
})

sampleTwo.addEventListener('mouseenter', e => {
  sampleTwo.style.backgroundColor = '#4d4081';
  sampleTwo.style.color = 'white';
})

sampleTwo.addEventListener('mouseleave', e => {
  sampleTwo.style.backgroundColor = 'white';
  sampleTwo.style.color = '#322567';
})

sampleThree.addEventListener('mouseenter', e => {
  sampleThree.style.backgroundColor = '#4d4081';
  sampleThree.style.color = 'white';
})

sampleThree.addEventListener('mouseleave', e => {
  sampleThree.style.backgroundColor = 'white';
  sampleThree.style.color = '#322567';
})

//shuffles samples in place
function shuffleArray(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}

//checks which answer the user clicked and changes the alien's dialogue to match
function checkAnswer() {
  samplesArray[0].onclick = () => {
    if (answersLoaded) {
      instruction.innerHTML = "This is a text sample generated by the machine learning model GPT-2, which was trained by the OpenAI research company. Click <a href='https://openai.com/blog/better-language-models/' target='blank'>here</a> to learn more about GPT-2, or refresh this page to try again!";
    }
  }

  samplesArray[1].onclick = () => {
    if (answersLoaded) {
      instruction.innerHTML = "Correct! This is the human-generated text sample; the other two samples were generated by <a href='https://openai.com/blog/better-language-models/' target='blank'>GPT-2</a> and a <a href='https://hjweide.github.io/char-rnn#:~:text=The%20term%20%E2%80%9Cchar%2Drnn%E2%80%9D,rnn%20as%20a%20classification%20model.' target='blank'>charRNN</a>. Refresh this page to try again!";
    }
  }

  samplesArray[2].onclick = () => {
    if (answersLoaded) {
      instruction.innerHTML = "This is a text sample generated by a charRNN model. CharRNN stands for Character Recurrent Neural Network. Click <a href='https://hjweide.github.io/char-rnn#:~:text=The%20term%20%E2%80%9Cchar%2Drnn%E2%80%9D,rnn%20as%20a%20classification%20model.' target='blank'>here</a> to learn more about charRNN models or refresh this page to try again!";
    }
  }

}

//sends info to runway GPT2 model
async function sendVector(humanText) {
  console.log('sending data');
  //GPT2 model input
  const dataGPT2 = {
    prompt: textInput
  }

  //information sent to GPT2 model
  const info = {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(dataGPT2),
  };

  //sent to charRNN model
  const dataRNN = {
    seed: textInput,
    temperature: 0.5,
    length: 300
  };

  // Generate text with the charRNN
  charRNN.generate(dataRNN)
    .then(result => {
      charRNNText = textInput + result.sample
    })

  const response = await fetch("/runwayml", info);
  const outputs = await response.json();
  const script = outputs.generated_text;
  //display GPT2 and human text as samples
  samplesArray[0].innerHTML = script;
  samplesArray[1].innerHTML = humanText;
  //why does .innerHTML not display all the text?
  samplesArray[2].innerText = charRNNText;
  //now all the answers are loaded and you can pick from them
  answersLoaded = true;
}